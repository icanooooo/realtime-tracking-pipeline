services:
  application_postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: historical_db
      POSTGRES_USER: icanooo
      POSTGRES_PASSWORD: thisisapassword
    volumes: 
      - historical_db_volumes:/var/lib/postgresql/data
      - ./scripts/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      - ./conf/custom-postgres.conf:/etc/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U icanooo -d historical_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - jenkins-net
      - cdc-network
  insert_location:
    build:
      context: .
      dockerfile: Dockerfile.insert_location
    depends_on:
      application_postgres:
        condition: service_healthy
    volumes:
      - ./scripts:/app
    command: ["python", "insert_location.py"]
    networks:
      - jenkins-net
   
  jenkins:
    build: .
    container_name: jenkins
    ports:
      - "8080:8080"
      - "10000:10000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - ./scripts:/var/jenkins_home/scripts
    restart: unless-stopped
    networks:
      - jenkins-net

  zoo1:
    image: confluentinc/cp-zookeeper:7.8.0
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - cdc-network

  kafka1:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - cdc-network  
  
  debezium:
    image: debezium/connect:2.7.3.Final
    depends_on:
      - kafka1
      - application_postgres
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka1:19092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      PLUGIN_PATH: /kafka/connect
    networks:
      - cdc-network

  connector-init:
    image: curlimages/curl:latest  
    depends_on:
      - debezium
    volumes:
      - ./scripts/register-connector.sh:/register-connector.sh
    entrypoint: ["sh", "/register-connector.sh"]
    networks:
      - cdc-network

volumes:
  historical_db_volumes:
  jenkins_home: 

networks:
  jenkins-net:
  cdc-network:
